name: CI

on:
  push:
    branches:
      - main
    tags: [ 'v*' ]
  pull_request:
    branches:
      - main

jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Cache PyPI
      uses: actions/cache@v2
      with:
        key: pip-lint-${{ hashFiles('requirements/*.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v2
      with:
        path: requirements/lint.txt
    - name: Install itself
      run: |
        python setup.py install
    - name: Run linters
      run: |
        make lint
    - name: Install spell checker
      run: |
        sudo apt install libenchant-dev
        pip install -r requirements/doc-spelling.txt
    - name: Run docs spelling
      run: |
        make doc-spelling
    - name: Prepare twine checker
   
      run: |
        pip install -U twine wheel
        python setup.py sdist bdist_wheel
    - name: Run twine checker
      run: |
        twine check dist/*

test:
  name: Test
  needs: lint
  strategy:
    matrix:
      pyver: [3.8]
      os: [ubuntu]
    fail-fast: false
  runs-on: ${{ matrix.os }}-latest
  timeout-minutes: 15
  steps:
  - name: Checkout
    uses: actions/checkout@v2
  - name: Setup Python ${{ matrix.pyver }}
    uses: actions/setup-python@v2
    with:
      python-version: ${{ matrix.pyver }}
  - name: Get pip cache dir
    id: pip-cache
    run: |
      echo "::set-output name=dir::$(pip cache dir)"    # - name: Cache
  - name: Cache PyPI
    uses: actions/cache@v2
    with:
      key: pip-ci-${{ runner.os }}-${{ matrix.pyver }}-${{ hashFiles('requirements/*.txt') }}
      path: ${{ steps.pip-cache.outputs.dir }}
      restore-keys: |
          pip-ci-${{ runner.os }}-${{ matrix.pyver }}-
  - name: Install dependencies
    uses: py-actions/py-dependency-install@v2
    with:
      path: requirements/ci.txt
  - name: Run unittests
    env:
      COLOR: 'yes'
    run: |
      python -m pytest tests -vv
      python -m coverage xml
  - name: Upload coverage
    uses: codecov/codecov-action@v1
    with:
      token: ${{ secrets.CODECOV_TOKEN }}
      file: ./coverage.xml
      flags: unit
      fail_ci_if_error: false